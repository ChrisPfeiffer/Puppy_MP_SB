// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using SharedPCL;
using System.Xml;
using System.Collections.Generic;
using System.Collections;
using System.IO;
using System.Linq;


namespace speechTherapy
{
	public partial class imagePgViewController : UIViewController
	{

		List<Pair> pairList { get; set; }

		string _leftWord;
		string _rightWord;

		private int pairIndex;
		AudioHandler audioHandler;
		//boolean to keep track of whether a recording is in progress.
		bool recordingAudio;
		bool isMulti;

		string videoPath;

		//public speechTherapyViewController Delegate { get; set; }
		public UIViewController Delegate{ get; set; }

		public imagePgViewController (IntPtr handle) : base (handle)
		{

		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			this.micImage.Hidden = true;
			this.recordingAudio = false;
			this.btnMulti.Hidden = true;

			var result = pairList.Where (pl => pl.rightImageName != "NULL");
			int count = result.Count ();
			//figure out if it is the multi - view controller
			if (count==0) {
				//it is multi-syllabalic words
				this.rightImageOutlet.Hidden = true;
				this.leftImageOutlet.Hidden = true;
				this.btnLeft.Hidden = true;
				this.btnRight.Hidden = true;

				this.btnMulti.Hidden = false;
				this.multiImage.Hidden = false;
				this.isMulti = true; 

			}

			//get videopath so we know whether or not to display the play video button
			var documents = Environment.GetFolderPath (Environment.SpecialFolder.MyDocuments);
			var library = System.IO.Path.Combine (documents, "..", "Library");
			videoPath = System.IO.Path.Combine (library, "sweetMovieFilm.mov");

			//if video exists, delete
			videoController.deleteVideo (videoPath);
			
			//shuffle the list of pairs
			pairList = HelperFunctions.Shuffle (pairList);

			pairIndex = 0;
			displayPair (pairIndex);
						
			//this.btnRecordAudio.SetImage (UIImage.FromFile ("iPad_Images/btnRecordAudio.png"), UIControlState.Normal);

			this.btnNext.TouchUpInside += theNextClick;
			this.btnPrevious.TouchUpInside += previousClick;
			this.btnRecordAudio.TouchUpInside += toggleRecordAudio;
			this.micImage.TouchUpInside += toggleRecordAudio;
			this.btnPlayAudio.TouchUpInside += playAudio;

			this.btnLeft.TouchUpInside += playLeftWord;
			this.btnRight.TouchUpInside += playRightWord;

			this.btnMulti += playLeftWord;

			this.btnPlayAudio.Enabled = false;
			this.btnPrevious.Enabled = true;
			this.btnPlayVideo.Enabled = false;

			this.audioHandler = new AudioHandler ();
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear (animated);

			if (videoController.vidExists (videoPath)) {
				this.btnPlayVideo.Enabled = true;
			}

			//decide whether or not to show the 
		}

		private void theNextClick(Object sender, EventArgs ea)
		{

			//delete last recorded video
			videoController.deleteVideo (videoPath);

			pairIndex++;
			this.btnPlayAudio.Enabled = false;
			this.btnPlayVideo.Enabled = false;

			if(pairList.Count > pairIndex)
			{
				//display the next image

				displayPair(pairIndex);

			}
			else{

				pairIndex = 0;
				displayPair(pairIndex);
			}
		}

		void previousClick (object sender, EventArgs e)
		{
			if (pairIndex == 0) {
				pairIndex = pairList.Count;
			}
			pairIndex--;
			this.btnPlayAudio.Enabled = false;
			this.btnPlayVideo.Enabled = false;
			videoController.deleteVideo (videoPath);
			displayPair (pairIndex);


		}

		private void toggleRecordAudio(Object sender, EventArgs ea)
		{
			if (!recordingAudio) {
				//start the audio recording.

				audioHandler.startrecording ();
				this.micImage.Hidden = false;
				recordingAudio = true;
				this.btnRecordAudio.Enabled = false;
				this.btnPrevious.Enabled = false;
				this.btnNext.Enabled = false;
				this.btnRecordVideo.Enabled = false;
				this.btnPlayAudio.Enabled = false;
				this.btnPlayVideo.Enabled = false;
			} 
			else {
				//end the audio recording.
				audioHandler.stopRecording ();
				this.btnPlayAudio.Enabled = true;
				this.micImage.Hidden = true;
				this.btnRecordAudio.Enabled = true;
				this.btnPrevious.Enabled = true;
				this.btnNext.Enabled = true;
				this.btnRecordVideo.Enabled = true;
				this.btnPlayVideo.Enabled = true;
				recordingAudio = false;
			}
		}



		private void displayPair(int index)
		{
			String leftImagePath = "iPad_Images/" + pairList [index].leftImageName + ".jpg";
			String rightImagePath = "iPad_Images/" + pairList [index].rightImageName + ".jpg";

			//set the class level variables so that if the left or right word is pushed we know what audio file to
			this._leftWord = pairList [index].leftImageName;
			this._rightWord = pairList [index].rightImageName;

			if(File.Exists(leftImagePath))
			{

				using(UIImage leftImage = UIImage.FromFile(leftImagePath))
				{
					if (!this.isMulti) {
						this.leftImageOutlet.Image = leftImage;
					} else {
						this.multiImage.Image = leftImage;
					}
				}
			}
			else
			{
				using (UIImage leftImage = UIImage.FromFile ("Photos/no_image.jpg")) {
					this.leftImageOutlet.Image = leftImage;
				}
			}

			if (!this.isMulti) {
				if (File.Exists (rightImagePath)) {
					using (UIImage rightImage = UIImage.FromFile (rightImagePath)) {
						this.rightImageOutlet.Image = rightImage;
					}
				} else {
					using (UIImage rightImage = UIImage.FromFile ("Photos/no_image.jpg")) {
						this.rightImageOutlet.Image = rightImage;
					}
				}
			}

			this.btnLeft.SetTitle( pairList [index].leftImageName,UIControlState.Normal);
			this.btnRight.SetTitle( pairList [index].rightImageName, UIControlState.Normal);
			this.btnMulti.SetTitle( pairList [index].leftImageName, UIControlState.Normal);

		} 

		public void setPairList(UIViewController vc, List<Pair> inputPairList)
		{
			Delegate = vc;
			pairList = inputPairList;
		}

		public void nextButtonClicked(MonoTouch.Foundation.NSObject sender)
		{ 
			pairIndex++;
			if(pairList.Count > pairIndex)
			{
				//display the next image

				displayPair(pairIndex);

			}
			else{

				pairIndex = 0;
				displayPair(pairIndex);
			}
		}
			
		public void playAudio (object sender, EventArgs e)
		{
			audioHandler.playAudio ();
		}

		public void playLeftWord (object sender, EventArgs ea)
		{
			audioHandler.playAudio (_leftWord);
		}

		public void playRightWord(object sender, EventArgs ea)
		{
			audioHandler.playAudio (_rightWord);
		}

		public override void PrepareForSegue(UIStoryboardSegue Segue, NSObject Sender)
		{

			base.PrepareForSegue (Segue, Sender);

			if (Segue.Identifier == "playSegue") {

				var vc = Segue.DestinationViewController as videoController;
				vc.setPlayNow (this, true);

			}
			else {
				var vc2 = Segue.DestinationViewController as videoController;
				vc2.setPlayNow (this, false);
			}
		}
	}
}
