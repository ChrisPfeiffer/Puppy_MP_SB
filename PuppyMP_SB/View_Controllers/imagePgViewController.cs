// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using SharedPCL;
using System.Xml;
using System.Collections.Generic;
using System.Collections;
using System.IO;


namespace speechTherapy
{
	public partial class imagePgViewController : UIViewController
	{

		List<Pair> pairList { get; set; }
		private int pairIndex;
		AudioHandler audioHandler;
		//boolean to keep track of whether a recording is in progress.
		bool recordingAudio;

		//public speechTherapyViewController Delegate { get; set; }
		public UIViewController Delegate{ get; set; }

		public imagePgViewController (IntPtr handle) : base (handle)
		{

		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();


			this.micImage.Hidden = true;
			this.recordingAudio = false;

			//shuffle the list of pairs
			pairList = HelperFunctions.Shuffle (pairList);

			pairIndex = 0;
			displayPair (pairIndex);


			this.btnNext.TouchUpInside += theNextClick;
			this.btnPrevious.TouchUpInside += previousClick;
			this.btnRecordAudio.TouchUpInside += toggleRecordAudio;
			this.btnPlayAudio.TouchUpInside += playAudio;
			this.btnPlayAudio.Enabled = false;
			this.btnPrevious.Enabled = false;
			//this.btnPlayVideo.Enabled = false;
			this.audioHandler = new AudioHandler ();



		}

		private void theNextClick(Object sender, EventArgs ea)
		{
			pairIndex++;
			this.btnPlayAudio.Enabled = false;
			this.btnPrevious.Enabled = true;

			if(pairList.Count > pairIndex)
			{
				//display the next image

				displayPair(pairIndex);

			}
			else{

				pairIndex = 0;
				displayPair(pairIndex);
			}
		}

		void previousClick (object sender, EventArgs e)
		{
		
			pairIndex--;
			this.btnPlayAudio.Enabled = false;
			displayPair (pairIndex);
			if (pairIndex == 0) {
				this.btnPrevious.Enabled = false;
			}



		}

		private void toggleRecordAudio(Object sender, EventArgs ea)
		{
			if (!recordingAudio) {
				//start the audio recording.

				audioHandler.startrecording ();
				this.micImage.Hidden = false;
				recordingAudio = true;
				this.btnRecordAudio.SetTitle ("Done!", UIControlState.Normal);
				this.btnPrevious.Enabled = false;
				this.btnNext.Enabled = false;
				this.btnRecordVideo.Enabled = false;
				this.btnPlayAudio.Enabled = false;
			} 
			else {
				//end the audio recording.
				audioHandler.stopRecording ();
				this.btnPlayAudio.Enabled = true;
				this.micImage.Hidden = true;
				this.btnRecordAudio.SetTitle ("Record", UIControlState.Normal);
				this.btnPrevious.Enabled = true;
				this.btnNext.Enabled = true;
				this.btnRecordVideo.Enabled = true;
				recordingAudio = false;
			}
		}



		private void displayPair(int index)
		{
			String leftImagePath = "iPad_Images/" + pairList [index].leftImageName + ".jpg";
			String rightImagePath = "iPad_Images/" + pairList [index].rightImageName + ".jpg";

			if(File.Exists(leftImagePath))
			{
				using(UIImage leftImage = UIImage.FromFile(leftImagePath))
				{
					this.leftImageOutlet.Image = leftImage;
				}
			}
			else
			{
				using (UIImage leftImage = UIImage.FromFile ("Photos/no_image.jpg")) {
					this.leftImageOutlet.Image = leftImage;
				}
			}

			if(File.Exists(rightImagePath))
			{
				using(UIImage rightImage =  UIImage.FromFile (rightImagePath))
				{
					this.rightImageOutlet.Image = rightImage;
				}
			}
			else{
				using(UIImage rightImage = UIImage.FromFile ("Photos/no_image.jpg"))
				{
					this.rightImageOutlet.Image = rightImage;
				}
			}

			this.leftLabel.Text = pairList [index].leftImageName;
			this.rightLabel.Text = pairList [index].rightImageName;

		} 

		public void setPairList(UIViewController vc, List<Pair> inputPairList)
		{
			Delegate = vc;
			pairList = inputPairList;
		}

		public void nextButtonClicked(MonoTouch.Foundation.NSObject sender)
		{ 
			pairIndex++;
			if(pairList.Count > pairIndex)
			{
				//display the next image

				displayPair(pairIndex);

			}
			else{

				pairIndex = 0;
				displayPair(pairIndex);
			}
		}

		public void playAudio (object sender, EventArgs e)
		{
			audioHandler.playAudio ();
		}

		public override void PrepareForSegue(UIStoryboardSegue Segue, NSObject Sender)
		{
			base.PrepareForSegue (Segue, Sender);

			this.btnPlayVideo.Enabled = true;

			if (Segue.Identifier == "playSegue") {

				var vc = Segue.DestinationViewController as videoController;
				vc.setPlayNow (this, true);

			}
			else {
				var vc2 = Segue.DestinationViewController as videoController;
				vc2.setPlayNow (this, false);
			}
		}
	}
}
